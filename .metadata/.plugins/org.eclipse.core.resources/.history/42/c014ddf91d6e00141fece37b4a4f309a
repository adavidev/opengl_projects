package core3d;

import static org.lwjgl.opengl.GL11.GL_AMBIENT;
import static org.lwjgl.opengl.GL11.GL_DIFFUSE;
import static org.lwjgl.opengl.GL11.GL_LIGHT1;
import static org.lwjgl.opengl.GL11.GL_LIGHTING;
import static org.lwjgl.opengl.GL11.GL_POSITION;
import static org.lwjgl.opengl.GL11.glEnable;
import static org.lwjgl.opengl.GL11.glLight;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.util.ArrayList;

import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.glu.GLU;

public class RenderManager {
	public static ArrayList<RenderObject> renderList = new ArrayList<RenderObject>();
	final static float[] AMBIENT = { .5f, .5f, .5f, 1f };

	public static void add(RenderObject renderObject) {
		renderList.add(renderObject);
	}

	public static void init(DisplayMode displayMode) {
		StringBuilder renderClass = new StringBuilder();
		Class<?> clazz;
		
		try
		{

			String line;
			BufferedReader dis = new BufferedReader(
					new FileReader("render"));
			while ((line = dis.readLine()) != null)
			{
				renderClass.append(line);
			}
		
			clazz = Class.forName(renderClass.toString());
		
		Constructor<?> constructor = clazz.getConstructor(String.class, Integer.class);
		Object instance = constructor.newInstance("stringparam", 42);
		
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (FileNotFoundException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void render() {
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
		GL11.glLoadIdentity(); // Reset The Current Modelview Matrix

		ViewContext.currentView.renderObject.doRender(); // Render the current camera
		
		for (RenderObject renderObject : renderList) {
			renderObject.doRender();
		}
	}
}
